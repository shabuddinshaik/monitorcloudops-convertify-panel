{"version":3,"file":"module.js","mappings":"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","sources":["webpack://monitorcloudops-convertify-panel/external amd \"@grafana/data\"","webpack://monitorcloudops-convertify-panel/external amd \"module\"","webpack://monitorcloudops-convertify-panel/external amd \"react\"","webpack://monitorcloudops-convertify-panel/webpack/bootstrap","webpack://monitorcloudops-convertify-panel/webpack/runtime/compat get default export","webpack://monitorcloudops-convertify-panel/webpack/runtime/define property getters","webpack://monitorcloudops-convertify-panel/webpack/runtime/hasOwnProperty shorthand","webpack://monitorcloudops-convertify-panel/webpack/runtime/make namespace object","webpack://monitorcloudops-convertify-panel/webpack/runtime/publicPath","webpack://monitorcloudops-convertify-panel/./node_modules/grafana-public-path.js","webpack://monitorcloudops-convertify-panel/./components/SimplePanel.tsx","webpack://monitorcloudops-convertify-panel/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/monitorcloudops-convertify-panel/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/monitorcloudops-convertify-panel/';\n","import React, { useState, useRef } from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { SimpleOptions } from '../types';\n\ninterface Props extends PanelProps<SimpleOptions> {}\n\nconst excelColumns = [\n  { bit: 0, name: 'Status (Bit 0)', description: '1=Running, 0=Not Running' },\n  { bit: 1, name: 'Stop (Bit 1)', description: '1=Stop, 0=Stop' },\n  { bit: 2, name: 'Init. Standby (Bit 2)', description: '1=[SET], 0=[CLR]' },\n  { bit: 3, name: 'Key Stop (Bit 3)', description: '1=[SET] Key Stop, 0=[CLR] Key Stop' },\n  { bit: 4, name: 'Standby (Bit 4)', description: '1=SET, 0=CLR' },\n  { bit: 5, name: 'Emergency Stop (Bit 5)', description: '1=SET, 0=CLR' },\n  { bit: 6, name: 'Starting (Bit 6)', description: '1=True, 0=False' },\n  { bit: 7, name: 'Stopping (Bit 7)', description: '1=TRUE, 0=FALSE' },\n  { bit: 9, name: 'Fault Stop (Bit 9)', description: '1=High, 0=Low' },\n  { bit: 10, name: 'Fault Stop (Bit 10)', description: '1=High, 0=Low' },\n  { bit: 11, name: 'Derating Running (Bit 11)', description: '1=Running, 0=Not Running' },\n  { bit: 13, name: 'IO-DSP Comm Abnormal (Bit 13)', description: '1=Abnormal, 0=Normal' },\n  { bit: 17, name: 'Total Signal Bit of Running State (Bit 17)', description: '1=Set, 0=Clear' },\n  { bit: 18, name: 'Total Stop Bit (Bit 18)', description: '1=Set, 0=Clear' },\n  { bit: 19, name: 'Anti-PID Running (Bit 19)', description: '1=Running, 0=Not Running' },\n  { bit: 20, name: 'Anti-PID Running (Bit 20)', description: '1=Running, 0=Not Running' },\n];\n\ntype Row = {\n  timestamp: any;\n  value: any;\n  binary?: string;\n  hex?: string;\n  [key: string]: any;\n};\n\nexport const SimplePanel: React.FC<Props> = ({ data, options, width, height }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [columnWidths, setColumnWidths] = useState<any>({});\n  const [columnFilters, setColumnFilters] = useState<any>({});\n  const rowsPerPage = 10;\n  const tableRef = useRef<HTMLTableElement>(null);\n\n  const toBinary = (value: number, bits = 32): string => value.toString(2).padStart(bits, '0');\n  const toHex = (value: number): string => '0x' + value.toString(16).toUpperCase();\n\n  const series = data.series[0];\n  const timeField = series?.fields.find((field) => field.name === 'time');\n  const valueField = series?.fields.find((field) => field.name === 'value');\n\n  const timeValues = timeField ? Array.from(timeField.values) : [];\n  const valueValues = valueField ? Array.from(valueField.values) : [];\n\n  const transformedData: Row[] = timeValues.map((time, index) => {\n    const value = valueValues[index];\n    const binaryValue = toBinary(value);\n\n    const bitFields = excelColumns.reduce((acc, col) => {\n      acc[col.name] = binaryValue[binaryValue.length - 1 - col.bit] || '0';\n      return acc;\n    }, {} as Record<string, string>);\n\n    return {\n      timestamp: time,\n      value,\n      binary: options.conversionType === 'binary' || options.conversionType === 'all' ? toBinary(value) : undefined,\n      hex: options.conversionType === 'hexadecimal' || options.conversionType === 'all' ? toHex(value) : undefined,\n      ...bitFields,\n    };\n  });\n\n  const pageCount = Math.ceil(transformedData.length / rowsPerPage);\n\n  // Apply filters\n  const applyColumnFilters = (data: Row[]) => {\n    if (Object.keys(columnFilters).length === 0) return data;\n\n    return data.filter((row) => {\n      return Object.keys(columnFilters).every((column) => {\n        const filterValue = columnFilters[column].toLowerCase();\n        const rowValue = row[column] ? row[column].toString().toLowerCase() : '';\n        return rowValue.includes(filterValue);\n      });\n    });\n  };\n\n  // Paginate and filter data\n  const filteredData = applyColumnFilters(\n    transformedData.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage)\n  );\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const handleColumnResize = (index: number, width: number) => {\n    setColumnWidths((prevWidths: any) => ({\n      ...prevWidths,\n      [index]: width,\n    }));\n  };\n\n  const handleColumnFilterChange = (column: string, value: string) => {\n    setColumnFilters((prevFilters: any) => ({\n      ...prevFilters,\n      [column]: value,\n    }));\n  };\n\n  // Check for \"No Data\"\n  if (!data || !data.series || data.series.length === 0) {\n    return (\n      <div style={{ width, height, padding: '10px', fontFamily: 'Arial, sans-serif' }}>\n        No data\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ width, height, overflow: 'auto', padding: '10px', fontFamily: 'Arial, sans-serif' }}>\n      <div style={{ marginBottom: '10px' }}>\n        {/* Display circle when data is present */}\n        <div style={{ width: '20px', height: '20px', borderRadius: '50%', backgroundColor: 'green' }}></div>\n      </div>\n      <table ref={tableRef} style={{ width: '100%', borderCollapse: 'collapse', textAlign: 'left', boxSizing: 'border-box' }}>\n        <thead>\n          <tr>\n            <th\n              style={{\n                padding: '12px',\n                border: '1px solid #ddd',\n                backgroundColor: '#1e73be', // Darker header color\n                color: 'white',\n                textAlign: 'center',\n              }}\n            >\n              Timestamp\n            </th>\n            <th\n              style={{\n                padding: '12px',\n                border: '1px solid #ddd',\n                backgroundColor: '#1e73be', // Darker header color\n                color: 'white',\n                textAlign: 'center',\n              }}\n            >\n              Value\n            </th>\n            {options.conversionType === 'binary' || options.conversionType === 'all' ? (\n              <th\n                style={{\n                  padding: '12px',\n                  border: '1px solid #ddd',\n                  backgroundColor: '#1e73be', // Darker header color\n                  color: 'white',\n                  textAlign: 'center',\n                }}\n              >\n                Binary\n              </th>\n            ) : null}\n            {options.conversionType === 'hexadecimal' || options.conversionType === 'all' ? (\n              <th\n                style={{\n                  padding: '12px',\n                  border: '1px solid #ddd',\n                  backgroundColor: '#1e73be', // Darker header color\n                  color: 'white',\n                  textAlign: 'center',\n                }}\n              >\n                Hex\n              </th>\n            ) : null}\n            {excelColumns.map((col, index) => (\n              <th\n                key={col.bit}\n                style={{\n                  padding: '12px',\n                  border: '1px solid #ddd',\n                  backgroundColor: '#1e73be', // Darker header color\n                  color: 'white',\n                  minWidth: columnWidths[index] || 'auto',\n                  cursor: 'col-resize',\n                  textAlign: 'center',\n                }}\n                onMouseDown={(e) => {\n                  const startX = e.pageX;\n                  const startWidth = tableRef.current?.rows[0].cells[index].offsetWidth || 0;\n                  const onMouseMove = (moveEvent: MouseEvent) => {\n                    const newWidth = startWidth + (moveEvent.pageX - startX);\n                    handleColumnResize(index, newWidth);\n                  };\n                  const onMouseUp = () => {\n                    document.removeEventListener('mousemove', onMouseMove);\n                    document.removeEventListener('mouseup', onMouseUp);\n                  };\n                  document.addEventListener('mousemove', onMouseMove);\n                  document.addEventListener('mouseup', onMouseUp);\n                }}\n              >\n                {col.name}\n                {/* Excel-like filter dropdown */}\n                <select\n                  onChange={(e) => handleColumnFilterChange(col.name, e.target.value)}\n                  style={{\n                    marginTop: '5px',\n                    padding: '5px',\n                    fontSize: '12px',\n                    borderRadius: '4px',\n                    backgroundColor: '#f4f6f9',\n                  }}\n                >\n                  <option value=\"\">All</option>\n                  {Array.from(new Set(transformedData.map((row) => row[col.name]))).map((uniqueValue, i) => (\n                    <option key={i} value={uniqueValue}>\n                      {uniqueValue}\n                    </option>\n                  ))}\n                </select>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((row, index) => (\n            <tr key={index}>\n              <td style={{ padding: '12px', border: '1px solid #ddd' }}>{row.timestamp || 'No Timestamp'}</td>\n              <td style={{ padding: '12px', border: '1px solid #ddd' }}>{row.value || 'No Value'}</td>\n              {row.binary ? <td style={{ padding: '12px', border: '1px solid #ddd' }}>{row.binary}</td> : null}\n              {row.hex ? <td style={{ padding: '12px', border: '1px solid #ddd' }}>{row.hex}</td> : null}\n              {excelColumns.map((col) => (\n                <td key={col.bit} style={{ padding: '12px', border: '1px solid #ddd' }}>\n                  {row[col.name] || 'No Data'}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div style={{ paddingTop: '10px', display: 'flex', justifyContent: 'center' }}>\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n          style={{\n            padding: '10px',\n            margin: '5px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            cursor: 'pointer',\n            borderRadius: '4px',\n          }}\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === pageCount}\n          style={{\n            padding: '10px',\n            margin: '5px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            cursor: 'pointer',\n            borderRadius: '4px',\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\n","import { PanelPlugin } from '@grafana/data';\nimport { SimpleOptions } from './types';\nimport { SimplePanel } from './components/SimplePanel';\n\nexport const plugin = new PanelPlugin<SimpleOptions>(SimplePanel).setPanelOptions((builder) => {\n  return builder\n    .addTextInput({\n      path: 'text',\n      name: 'Simple text option',\n      description: 'Description of panel option',\n      defaultValue: 'Default value of text input option',\n    })\n    .addRadio({\n      path: 'conversionType',\n      name: 'Conversion Type',\n      description: 'Select the conversion type for table values',\n      defaultValue: 'binary',\n      settings: {\n        options: [\n          { value: 'binary', label: 'Binary' },\n          { value: 'hexadecimal', label: 'Hexadecimal' },\n          { value: 'all', label: 'All' }, // Add option to show all conversions\n        ],\n      },\n    })\n    .addColorPicker({\n      path: 'textColor',\n      name: 'Text Color',\n      defaultValue: '#000000',  // Default color is black\n      description: 'Select the text color for the panel',\n    })\n    .addSelect({\n      path: 'selectedField',\n      name: 'Select Field for Conversion',\n      defaultValue: '',\n      description: 'Choose which field to convert',\n      settings: {\n        options: [\n          { value: '', label: 'None' }, // Add other fields dynamically here based on your dataset\n          { value: 'time', label: 'Time' },\n          { value: 'otherField', label: 'Other Field' },  // Example of another field\n        ],\n      },\n    });\n});"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","excelColumns","bit","name","description","plugin","PanelPlugin","data","options","width","height","currentPage","setCurrentPage","useState","columnWidths","setColumnWidths","columnFilters","setColumnFilters","tableRef","useRef","toBinary","bits","toString","padStart","toHex","toUpperCase","series","timeField","fields","find","field","valueField","timeValues","Array","from","values","valueValues","transformedData","map","time","index","binaryValue","bitFields","reduce","acc","col","length","timestamp","binary","conversionType","hex","pageCount","Math","ceil","filteredData","keys","filter","row","every","column","filterValue","toLowerCase","includes","applyColumnFilters","handlePageChange","newPage","div","style","overflow","padding","fontFamily","marginBottom","borderRadius","backgroundColor","table","ref","borderCollapse","textAlign","boxSizing","thead","tr","th","border","color","minWidth","cursor","onMouseDown","e","startX","pageX","startWidth","current","rows","cells","offsetWidth","onMouseMove","moveEvent","newWidth","prevWidths","handleColumnResize","onMouseUp","document","removeEventListener","addEventListener","select","onChange","handleColumnFilterChange","target","prevFilters","marginTop","fontSize","option","Set","uniqueValue","i","tbody","td","paddingTop","display","justifyContent","button","onClick","disabled","margin","setPanelOptions","builder","addTextInput","path","defaultValue","addRadio","settings","label","addColorPicker","addSelect"],"sourceRoot":""}