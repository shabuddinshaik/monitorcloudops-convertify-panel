{"version":3,"file":"module.js","mappings":";sFAAAA,EAAOC,QAAUC,C,UCAjBF,EAAOC,QAAUE,C,UCAjBH,EAAOC,QAAUG,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASK,EAAyBE,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCrBAK,EAAoBK,EAAKX,IACxB,IAAIY,EAASZ,GAAUA,EAAOa,WAC7B,IAAOb,EAAiB,QACxB,IAAM,EAEP,OADAM,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACb,EAASe,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEjB,EAASgB,IAC5EE,OAAOC,eAAenB,EAASgB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK3B,IACH,oBAAX4B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAenB,EAAS4B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAenB,EAAS,aAAc,CAAE8B,OAAO,GAAO,ECL9DzB,EAAoB0B,EAAI,mD,4DCGxB,IACE,KAAiB,QACb,QAAkBC,MAAM,EAAG,QAAkBC,YAAY,KAAO,GAChE,mD,u6BCAN,MAAMC,EAAe,CACnB,CAAEC,IAAK,EAAGC,KAAM,iBAAkBC,YAAa,4BAC/C,CAAEF,IAAK,EAAGC,KAAM,eAAgBC,YAAa,kBAC7C,CAAEF,IAAK,EAAGC,KAAM,wBAAyBC,YAAa,oBACtD,CAAEF,IAAK,EAAGC,KAAM,mBAAoBC,YAAa,sCACjD,CAAEF,IAAK,EAAGC,KAAM,kBAAmBC,YAAa,gBAChD,CAAEF,IAAK,EAAGC,KAAM,yBAA0BC,YAAa,gBACvD,CAAEF,IAAK,EAAGC,KAAM,mBAAoBC,YAAa,mBACjD,CAAEF,IAAK,EAAGC,KAAM,mBAAoBC,YAAa,mBACjD,CAAEF,IAAK,EAAGC,KAAM,qBAAsBC,YAAa,iBACnD,CAAEF,IAAK,GAAIC,KAAM,sBAAuBC,YAAa,iBACrD,CAAEF,IAAK,GAAIC,KAAM,4BAA6BC,YAAa,4BAC3D,CAAEF,IAAK,GAAIC,KAAM,gCAAiCC,YAAa,wBAC/D,CAAEF,IAAK,GAAIC,KAAM,6CAA8CC,YAAa,kBAC5E,CAAEF,IAAK,GAAIC,KAAM,0BAA2BC,YAAa,kBACzD,CAAEF,IAAK,GAAIC,KAAM,4BAA6BC,YAAa,4BAC3D,CAAEF,IAAK,GAAIC,KAAM,4BAA6BC,YAAa,6BClBhDC,EAAS,IAAIC,EAAAA,aD6BkB,EAAGC,OAAMC,UAASC,QAAOC,aACnE,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACxCC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAc,CAAC,GAGnDG,EAAW,CAACnB,EAAeoB,EAAO,KAAepB,EAAMqB,SAAS,GAAGC,SAASF,EAAM,KAClFG,EAASvB,GAA0B,KAAOA,EAAMqB,SAAS,IAAIG,cAE7DC,EAASf,EAAKe,OAAO,GAErBC,EAAYD,aAAAA,EAAAA,EAAQE,OAAOC,MAAMC,GAAyB,SAAfA,EAAMC,OACjDC,GACJN,aAAAA,EAAAA,EAAQE,OAAOC,MAAMC,GAAUA,EAAMvB,OAASK,EAAQqB,mBACtDP,aAAAA,EAAAA,EAAQE,OAAOC,MAAMC,GAAyB,WAAfA,EAAMC,QAGvC,KAAKpB,GAASA,EAAKe,QAAiC,IAAvBf,EAAKe,OAAOQ,QAAiBP,GAAcK,GACtE,OACE,kBAACG,MAAAA,CAAIC,MAAO,CAAEvB,QAAOC,SAAQuB,QAAS,OAAQC,WAAY,sBACxD,kBAACH,MAAAA,KAAI,YAKX,MAAMI,EAAaC,MAAMC,KAAKd,EAAUe,QAClCC,EAAcH,MAAMC,KAAKT,EAAWU,QAEpCE,EAAyBL,EAAWM,KAAI,CAACC,EAAMC,KACnD,MAAM9C,EAAQ0C,EAAYI,GACpBC,EAAc5B,EAASnB,GAEvBgD,EAAY5C,EAAa6C,QAAO,CAACC,EAAKC,KAC1CD,EAAIC,EAAI7C,MAAQyC,EAAYA,EAAYd,OAAS,EAAIkB,EAAI9C,MAAQ,IAC1D6C,IACN,CAAC,GAEJ,OAAO,GACLE,UAAWP,EACX7C,QACAqD,OAAmC,WAA3B1C,EAAQ2C,gBAA0D,QAA3B3C,EAAQ2C,eAA2BnC,EAASnB,QAAStB,EACpG6E,IAAgC,gBAA3B5C,EAAQ2C,gBAA+D,QAA3B3C,EAAQ2C,eAA2B/B,EAAMvB,QAAStB,GAChGsE,EAAAA,IAoBDQ,EAZqB,CAAC9C,GACgB,IAAtCtB,OAAOqE,KAAKxC,GAAegB,OAAqBvB,EAE7CA,EAAKgD,QAAQC,GACXvE,OAAOqE,KAAKxC,GAAe2C,OAAOC,I,IAGhCF,EAFP,MAAMG,EAAc7C,EAAc4C,GAClC,OAAKC,GAA+B,QAAhBA,IACF,QAAXH,EAAAA,EAAIE,UAAJF,IAAAA,OAAAA,EAAAA,EAAatC,cAAeyC,CAAW,MAK/BC,CACnBpB,EAAgBzC,MA3DE,IA2DKY,EAAc,GA3DnB,GA2DqCA,IAGnDkD,EAAoBC,IACxBlD,EAAekD,EAAQ,EAUzB,OACE,kBAAC/B,MAAAA,CAAIC,MAAO,CAAEvB,QAAOC,SAAQqD,SAAU,OAAQ9B,QAAS,MAAOC,WAAY,sBACzE,kBAAC8B,QAAAA,CACChC,MAAO,CACLvB,MAAO,OACPwD,eAAgB,WAChBC,UAAW,OACXhC,WAAY,oBACZiC,OAAQ,mBAGV,kBAACC,QAAAA,KACC,kBAACC,KAAAA,KACC,kBAACC,KAAAA,CAAGtC,MAAO,CAAEC,QAAS,MAAOsC,gBAAiB,UAAWC,MAAO,OAAQC,SAAU,OAAQC,SAAU,UAAW,aAC/G,kBAACJ,KAAAA,CAAGtC,MAAO,CAAEC,QAAS,MAAOsC,gBAAiB,UAAWC,MAAO,OAAQC,SAAU,SAAU,SAChE,WAA3BjE,EAAQ2C,gBAA0D,QAA3B3C,EAAQ2C,eAC9C,kBAACmB,KAAAA,CAAGtC,MAAO,CAAEC,QAAS,MAAOsC,gBAAiB,UAAWC,MAAO,OAAQC,SAAU,SAAU,UAC1F,KACwB,gBAA3BjE,EAAQ2C,gBAA+D,QAA3B3C,EAAQ2C,eACnD,kBAACmB,KAAAA,CAAGtC,MAAO,CAAEC,QAAS,MAAOsC,gBAAiB,UAAWC,MAAO,OAAQC,SAAU,SAAU,OAC1F,KACHjE,EAAQmE,qBACP1E,EAAawC,KAAKO,IAChB,yBAACsB,KAAAA,CACCvF,IAAKiE,EAAI9C,IACT8B,MAAO,CACLC,QAAS,MACTsC,gBAAiB,UACjBC,MAAO,OACPC,SAAU,OACVG,SAAU,WACVF,SAAU,QACVR,UAAW,WAGZlB,EAAI7C,KACL,kBAAC0E,SAAAA,CACCC,SAAWC,IAAMC,OA5CDtB,EA4C0BV,EAAI7C,KA5CdN,EA4CoBkF,EAAEE,OAAOpF,WA3C7EkB,GAAkBmE,GAAsB,OACnCA,GAAAA,CACH,CAACxB,GAAS7D,MAHmB,IAAC6D,EAAgB7D,CA4CmC,EACnEmC,MAAO,CACLmD,UAAW,MACX1E,MAAO,MACPwB,QAAS,MACTkC,OAAQ,iBACRiB,aAAc,MACdX,SAAU,SAGZ,kBAACY,SAAAA,CAAOxF,MAAM,OAAM,QA9EV6D,EA+EUV,EAAI7C,KA9EjC,IAAI,IAAImF,IAAI9C,EAAgBC,KAAKe,GAAQA,EAAIE,QA8ENjB,KAAK5C,GACjC,kBAACwF,SAAAA,CAAOtG,IAAKc,EAAOA,MAAOA,GACxBA,OAjFI,IAAC6D,CAiFL7D,MAQjB,kBAAC0F,QAAAA,KACElC,EAAaZ,KAAI,CAACe,EAAKb,IACtB,kBAAC0B,KAAAA,CAAGtF,IAAK4D,EAAOX,MAAO,CAAEwD,aAAc,mBACrC,kBAACC,KAAAA,CAAGzD,MAAO,CAAEC,QAAS,MAAOkC,OAAQ,mBAClC,IAAIuB,KAAKlC,EAAIP,WAAW0C,kBAE3B,kBAACF,KAAAA,CAAGzD,MAAO,CAAEC,QAAS,MAAOkC,OAAQ,mBAAqBX,EAAI3D,OAC7D2D,EAAIN,OAAS,kBAACuC,KAAAA,CAAGzD,MAAO,CAAEC,QAAS,MAAOkC,OAAQ,mBAAqBX,EAAIN,QAAe,KAC1FM,EAAIJ,IAAM,kBAACqC,KAAAA,CAAGzD,MAAO,CAAEC,QAAS,MAAOkC,OAAQ,mBAAqBX,EAAIJ,KAAY,KACpF5C,EAAQmE,qBACP1E,EAAawC,KAAKO,GAChB,kBAACyC,KAAAA,CACC1G,IAAKiE,EAAI9C,IACT8B,MAAO,CACLC,QAAS,MACTkC,OAAQ,iBACRO,SAAU,QACVR,UAAW,WAGZV,EAAIR,EAAI7C,cAOvB,kBAAC4B,MAAAA,CAAIC,MAAO,CAAEmD,UAAW,MAAOjB,UAAW,WACzC,kBAAC0B,SAAAA,CACCC,QAAS,IAAMhC,EAAiBlD,EAAc,GAC9CmF,SAA0B,IAAhBnF,EACVqB,MAAO,CACL+D,OAAQ,MACR9D,QAAS,UACTsC,gBAAiB,UACjBC,MAAO,OACPL,OAAQ,SAEX,YAGD,kBAACyB,SAAAA,CACCC,QAAS,IAAMhC,EAAiBlD,EAAc,GAC9CmF,SAAUnF,IAAgBqF,KAAKC,KAAKzD,EAAgBV,OA9KxC,IA+KZE,MAAO,CACL+D,OAAQ,MACR9D,QAAS,UACTsC,gBAAiB,UACjBC,MAAO,OACPL,OAAQ,SAEX,aCtNyD+B,iBAAiBC,GAC1EA,EACJC,SAAS,CACRC,KAAM,iBACNlG,KAAM,kBACNC,YAAa,8CACbkG,aAAc,SACdC,SAAU,CACR/F,QAAS,CACP,CAAEX,MAAO,SAAU2G,MAAO,UAC1B,CAAE3G,MAAO,cAAe2G,MAAO,eAC/B,CAAE3G,MAAO,MAAO2G,MAAO,WAI5BC,iBAAiB,CAChBJ,KAAM,sBACNlG,KAAM,wBACNC,YAAa,0CACbkG,cAAc,M","sources":["webpack://monitorcloudops-convertify-panel/external amd \"@grafana/data\"","webpack://monitorcloudops-convertify-panel/external amd \"module\"","webpack://monitorcloudops-convertify-panel/external amd \"react\"","webpack://monitorcloudops-convertify-panel/webpack/bootstrap","webpack://monitorcloudops-convertify-panel/webpack/runtime/compat get default export","webpack://monitorcloudops-convertify-panel/webpack/runtime/define property getters","webpack://monitorcloudops-convertify-panel/webpack/runtime/hasOwnProperty shorthand","webpack://monitorcloudops-convertify-panel/webpack/runtime/make namespace object","webpack://monitorcloudops-convertify-panel/webpack/runtime/publicPath","webpack://monitorcloudops-convertify-panel/./node_modules/grafana-public-path.js","webpack://monitorcloudops-convertify-panel/./components/SimplePanel.tsx","webpack://monitorcloudops-convertify-panel/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/monitorcloudops-convertify-panel/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/monitorcloudops-convertify-panel/';\n","import React, { useState } from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { SimpleOptions } from '../types';\n\ninterface Props extends PanelProps<SimpleOptions> {}\n\nconst excelColumns = [\n  { bit: 0, name: 'Status (Bit 0)', description: '1=Running, 0=Not Running' },\n  { bit: 1, name: 'Stop (Bit 1)', description: '1=Stop, 0=Stop' },\n  { bit: 2, name: 'Init. Standby (Bit 2)', description: '1=[SET], 0=[CLR]' },\n  { bit: 3, name: 'Key Stop (Bit 3)', description: '1=[SET] Key Stop, 0=[CLR] Key Stop' },\n  { bit: 4, name: 'Standby (Bit 4)', description: '1=SET, 0=CLR' },\n  { bit: 5, name: 'Emergency Stop (Bit 5)', description: '1=SET, 0=CLR' },\n  { bit: 6, name: 'Starting (Bit 6)', description: '1=True, 0=False' },\n  { bit: 7, name: 'Stopping (Bit 7)', description: '1=TRUE, 0=FALSE' },\n  { bit: 9, name: 'Fault Stop (Bit 9)', description: '1=High, 0=Low' },\n  { bit: 10, name: 'Fault Stop (Bit 10)', description: '1=High, 0=Low' },\n  { bit: 11, name: 'Derating Running (Bit 11)', description: '1=Running, 0=Not Running' },\n  { bit: 13, name: 'IO-DSP Comm Abnormal (Bit 13)', description: '1=Abnormal, 0=Normal' },\n  { bit: 17, name: 'Total Signal Bit of Running State (Bit 17)', description: '1=Set, 0=Clear' },\n  { bit: 18, name: 'Total Stop Bit (Bit 18)', description: '1=Set, 0=Clear' },\n  { bit: 19, name: 'Anti-PID Running (Bit 19)', description: '1=Running, 0=Not Running' },\n  { bit: 20, name: 'Anti-PID Running (Bit 20)', description: '1=Running, 0=Not Running' },\n];\n\ntype Row = {\n  timestamp: any;\n  value: any;\n  binary?: string;\n  hex?: string;\n  [key: string]: any;\n};\n\nexport const SimplePanel: React.FC<Props> = ({ data, options, width, height }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [columnFilters, setColumnFilters] = useState<any>({});\n  const rowsPerPage = 10;\n\n  const toBinary = (value: number, bits = 32): string => value.toString(2).padStart(bits, '0');\n  const toHex = (value: number): string => '0x' + value.toString(16).toUpperCase();\n\n  const series = data.series[0];\n\n  const timeField = series?.fields.find((field) => field.type === 'time');\n  const valueField =\n    series?.fields.find((field) => field.name === options.selectedField) ||\n    series?.fields.find((field) => field.type === 'number');\n\n  // Check for \"No Data\" first\n  if (!data || !data.series || data.series.length === 0 || !timeField || !valueField) {\n    return (\n      <div style={{ width, height, padding: '10px', fontFamily: 'Arial, sans-serif' }}>\n        <div>No data</div>\n      </div>\n    );\n  }\n\n  const timeValues = Array.from(timeField.values);\n  const valueValues = Array.from(valueField.values);\n\n  const transformedData: Row[] = timeValues.map((time, index) => {\n    const value = valueValues[index];\n    const binaryValue = toBinary(value);\n\n    const bitFields = excelColumns.reduce((acc, col) => {\n      acc[col.name] = binaryValue[binaryValue.length - 1 - col.bit] || '0';\n      return acc;\n    }, {} as Record<string, string>);\n\n    return {\n      timestamp: time,\n      value,\n      binary: options.conversionType === 'binary' || options.conversionType === 'all' ? toBinary(value) : undefined,\n      hex: options.conversionType === 'hexadecimal' || options.conversionType === 'all' ? toHex(value) : undefined,\n      ...bitFields,\n    };\n  });\n\n  const uniqueColumnValues = (column: string) => {\n    return [...new Set(transformedData.map((row) => row[column]))];\n  };\n\n  const applyColumnFilters = (data: Row[]) => {\n    if (Object.keys(columnFilters).length === 0) return data;\n\n    return data.filter((row) => {\n      return Object.keys(columnFilters).every((column) => {\n        const filterValue = columnFilters[column];\n        if (!filterValue || filterValue === 'All') return true;\n        return row[column]?.toString() === filterValue;\n      });\n    });\n  };\n\n  const filteredData = applyColumnFilters(\n    transformedData.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage)\n  );\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const handleColumnFilterChange = (column: string, value: string) => {\n    setColumnFilters((prevFilters: any) => ({\n      ...prevFilters,\n      [column]: value,\n    }));\n  };\n\n  return (\n    <div style={{ width, height, overflow: 'auto', padding: '5px', fontFamily: 'Arial, sans-serif' }}>\n      <table\n        style={{\n          width: '100%',\n          borderCollapse: 'collapse',\n          textAlign: 'left',\n          fontFamily: 'Arial, sans-serif',\n          border: '1px solid #ddd',\n        }}\n      >\n        <thead>\n          <tr>\n            <th style={{ padding: '5px', backgroundColor: '#0056b3', color: '#fff', fontSize: '12px', minWidth: '160px' }}>Timestamp</th>\n            <th style={{ padding: '5px', backgroundColor: '#0056b3', color: '#fff', fontSize: '12px' }}>Value</th>\n            {options.conversionType === 'binary' || options.conversionType === 'all' ? (\n              <th style={{ padding: '5px', backgroundColor: '#0056b3', color: '#fff', fontSize: '12px' }}>Binary</th>\n            ) : null}\n            {options.conversionType === 'hexadecimal' || options.conversionType === 'all' ? (\n              <th style={{ padding: '5px', backgroundColor: '#0056b3', color: '#fff', fontSize: '12px' }}>Hex</th>\n            ) : null}\n            {options.showConstantColumns &&\n              excelColumns.map((col) => (\n                <th\n                  key={col.bit}\n                  style={{\n                    padding: '6px',\n                    backgroundColor: '#0056b3',\n                    color: '#fff',\n                    fontSize: '10px',\n                    position: 'relative',\n                    minWidth: '150px', // Adjust this value as needed\n                    textAlign: 'center',\n                  }}\n                >\n                  {col.name}\n                  <select\n                    onChange={(e) => handleColumnFilterChange(col.name, e.target.value)}\n                    style={{\n                      marginTop: '4px',\n                      width: '90%',\n                      padding: '4px',\n                      border: '1px solid #ccc',\n                      borderRadius: '4px',\n                      fontSize: '10px',\n                    }}\n                  >\n                    <option value=\"All\">All</option>\n                    {uniqueColumnValues(col.name).map((value) => (\n                      <option key={value} value={value}>\n                        {value}\n                      </option>\n                    ))}\n                  </select>\n                </th>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((row, index) => (\n            <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\n              <td style={{ padding: '6px', border: '1px solid #ddd' }}>\n                {new Date(row.timestamp).toLocaleString()}\n              </td>\n              <td style={{ padding: '6px', border: '1px solid #ddd' }}>{row.value}</td>\n              {row.binary ? <td style={{ padding: '6px', border: '1px solid #ddd' }}>{row.binary}</td> : null}\n              {row.hex ? <td style={{ padding: '6px', border: '1px solid #ddd' }}>{row.hex}</td> : null}\n              {options.showConstantColumns &&\n                excelColumns.map((col) => (\n                  <td\n                    key={col.bit}\n                    style={{\n                      padding: '6px',\n                      border: '1px solid #ddd',\n                      minWidth: '150px', // Adjust this value as needed\n                      textAlign: 'center',\n                    }}\n                  >\n                    {row[col.name]}\n                  </td>\n                ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div style={{ marginTop: '5px', textAlign: 'center' }}>\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n          style={{\n            margin: '5px',\n            padding: '5px 8px',\n            backgroundColor: '#0056b3',\n            color: '#fff',\n            border: 'none',\n          }}\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === Math.ceil(transformedData.length / rowsPerPage)}\n          style={{\n            margin: '5px',\n            padding: '4px 6px',\n            backgroundColor: '#0056b3',\n            color: '#fff',\n            border: 'none',\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { SimpleOptions } from './types';\nimport { SimplePanel } from './components/SimplePanel';\n\nexport const plugin = new PanelPlugin<SimpleOptions>(SimplePanel).setPanelOptions((builder) => {\n  return builder\n    .addRadio({\n      path: 'conversionType',\n      name: 'Conversion Type',\n      description: 'Select the conversion type for table values',\n      defaultValue: 'binary',\n      settings: {\n        options: [\n          { value: 'binary', label: 'Binary' },\n          { value: 'hexadecimal', label: 'Hexadecimal' },\n          { value: 'all', label: 'All' },\n        ],\n      },\n    })\n    .addBooleanSwitch({\n      path: 'showConstantColumns',\n      name: 'Show Constant Columns',\n      description: 'Toggle to show or hide constant columns',\n      defaultValue: true, // Default to show constant columns\n    });\n});"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","excelColumns","bit","name","description","plugin","PanelPlugin","data","options","width","height","currentPage","setCurrentPage","useState","columnFilters","setColumnFilters","toBinary","bits","toString","padStart","toHex","toUpperCase","series","timeField","fields","find","field","type","valueField","selectedField","length","div","style","padding","fontFamily","timeValues","Array","from","values","valueValues","transformedData","map","time","index","binaryValue","bitFields","reduce","acc","col","timestamp","binary","conversionType","hex","filteredData","keys","filter","row","every","column","filterValue","applyColumnFilters","handlePageChange","newPage","overflow","table","borderCollapse","textAlign","border","thead","tr","th","backgroundColor","color","fontSize","minWidth","showConstantColumns","position","select","onChange","e","handleColumnFilterChange","target","prevFilters","marginTop","borderRadius","option","Set","tbody","borderBottom","td","Date","toLocaleString","button","onClick","disabled","margin","Math","ceil","setPanelOptions","builder","addRadio","path","defaultValue","settings","label","addBooleanSwitch"],"sourceRoot":""}